(function () {
  'use strict';

  function asyncSeries(list, callback) {
    function _run(index, list, callback) {
      var item = list[index];
      if (item) {
        item(function (err) {
          if (err) {
            callback(err);
          } else {
            _run(index + 1, list, callback);
          }
        });
      } else {
        callback();
      }
    }
    _run(0, list, callback);
  }
  function resolveStyles() {
    var obj = {};

    function _addStyle(arg) {
      if (Array.isArray(arg)) {
        arg.forEach(_addStyle);
      } else {
        for (var key in arg) {
          obj[key] = arg[key];
        }
      }
    }

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _addStyle(args);

    var s = "";
    for (var key in obj) {
      var val = obj[key];
      s += key + ":" + val + ";";
    }
    return s;
  }

  var g_callbackIndex = 1;
  var g_callbackMap = {};

  function sendHost(event, extra, cb) {
    if (extra === undefined) {
      extra = null;
    }
    var callback_index = void 0;
    if (cb) {
      callback_index = g_callbackIndex++;
      g_callbackMap[callback_index] = cb;
    }
    var json = JSON.stringify({ event: event, extra: extra, callback_index: callback_index });
    if (window.ReactNativeWebView && window.ReactNativeWebView.postMessage) {
      window.ReactNativeWebView.postMessage(json);
    } else {
      console.log(json);
    }
  }

  var g_eventMap = {};
  function onMessage(event, handler) {
    if (event in g_eventMap) {
      g_eventMap[event].push(handler);
    } else {
      g_eventMap[event] = [handler];
    }
  }
  function emitMessage(event, err, result, callback_index) {
    var list = g_eventMap[event];
    if (list && !err) {
      list.forEach(function (cb) {
        return cb(result);
      });
    }

    if (callback_index) {
      var cb = g_callbackMap[callback_index];
      if (cb) {
        delete g_callbackMap[callback_index];
        cb(err, result);
      }
    }
  }

  function log(log_event_name, extra) {
    sendHost("log", { log_event_name: log_event_name, extra: extra });
  }

  var UI = {
    addLoader: addLoader,
    removeLoader: removeLoader,
    setLoaderText: setLoaderText,
    addLoginButton: addLoginButton,
    removeLoginButton: removeLoginButton,
    addBlockError: addBlockError
  };

  var styles = {
    loader: {
      position: 'absolute',
      top: 0,
      bottom: 0,
      left: 0,
      right: 0,
      background: 'transparent center center no-repeat',
      'background-size': 'cover',

      display: 'flex',
      'flex-direction': 'column',
      'justify-content': 'center',
      'align-items': 'center',
      'font-family': 'Helvetica, Arial, sans-serif',
      'font-weight': 'normal'
    },
    cover: {
      'z-index': '0',
      position: 'absolute',
      top: 0,
      bottom: 0,
      left: 0,
      right: 0,
      background: 'rgba(0,0,0,0.3)',

      display: 'flex',
      'flex-direction': 'column',
      'justify-content': 'center',
      'align-items': 'center'
    },
    middleLoader: {
      'z-index': '1',
      position: 'relative',
      width: '100px',
      height: '100px',
      'border-radius': '50%',
      overflow: 'hidden'
    },
    icon: {
      position: 'absolute',
      top: 0,
      bottom: 0,
      left: 0,
      right: 0,
      margin: '10px',
      'border-radius': '50%',
      background: '#333 center center no-repeat',
      'background-size': 'cover'
    },
    spinner: {
      position: 'absolute',
      top: 0,
      bottom: 0,
      left: 0,
      right: 0,
      border: '10px solid',
      'border-color': 'blue black blue black',
      'border-radius': '50%',
      animation: 'harbour-loader-spinner 2s linear infinite'
    },
    loaderText: {
      'z-index': '1',
      'margin-top': '20px',
      color: 'white',
      'font-size': '16px',
      'font-weight': 'bold',
      'font-family': 'inherit',
      'text-shadow': '0 0 5px black'
    },
    loginButton: {
      position: 'absolute',
      bottom: '60px',
      'margin-left': 'auto',
      'margin-right': 'auto',
      height: '40px',
      width: '236px',

      background: '#4267b2',
      'border-radius': '4px',
      cursor: 'pointer',

      display: 'flex',
      'flex-direction': 'row',
      'justify-content': 'center',
      'align-items': 'center'
    },
    loginIcon: {
      position: 'absolute',
      top: '8px',
      left: '10px',
      width: '24px',
      height: '24px'
    },
    buttonText: {
      'margin-left': '24px',
      'margin-top': '2px',
      color: 'white',
      'font-size': '16px',
      'font-family': 'inherit'
    },
    errorText: {
      'z-index': '1',
      'margin-top': '10px',
      padding: '20px',
      color: 'red',
      'font-size': '16px',
      'font-family': 'inherit',
      'text-align': 'center',
      'text-shadow': '0 0 5px black'
    }
  };

  function addLoader(opts) {
    var loader_style = void 0;
    if (opts && opts.backgroundImage) {
      var _style = { 'background-image': 'url(' + opts.backgroundImage + ')' };
      loader_style = resolveStyles([styles.loader, _style]);
    } else {
      loader_style = resolveStyles(styles.loader);
    }
    var icon_style = void 0;
    if (opts && opts.iconImage) {
      var _style2 = { 'background-image': 'url(' + opts.iconImage + ')' };
      icon_style = resolveStyles([styles.icon, _style2]);
    } else {
      icon_style = resolveStyles(styles.icon);
    }

    var html = '<div id=\'harbour-loader\' style=\'' + loader_style + '\'>\n  <div class=\'harbour-cover\' style=\'' + resolveStyles(styles.cover) + '\'></div>\n  <div class=\'harbour-loader\' style=\'' + resolveStyles(styles.middleLoader) + '\'>\n    <div class=\'harbour-spinner\' style=\'' + resolveStyles(styles.spinner) + '\'></div>\n    <div class=\'harbour-spinner-icon\' style=\'' + icon_style + '\'></div>\n  </div>\n  <div id=\'harbour-loader-text\' style=\'' + resolveStyles(styles.loaderText) + '\'>0% Loaded</div>\n</div>';

    var temp = document.createElement('div');
    temp.innerHTML = html;

    document.body.appendChild(temp.firstChild);

    var css = '@keyframes harbour-loader-spinner {\n  from { transform: rotate(0deg); }\n  to { transform: rotate(360deg); }\n}\n';
    var style = document.createElement('style');
    style.type = 'text/css';
    style.appendChild(document.createTextNode(css));
    document.head.appendChild(style);
  }

  function removeLoader() {
    var el = document.getElementById('harbour-loader');
    document.body.removeChild(el);
  }

  function setLoaderText(text) {
    var text_el = document.getElementById('harbour-loader-text');
    text_el.innerText = text;
  }
  function addLoginButton() {
    var html = '<div id=\'harbour-loader-login-button\' style=\'' + resolveStyles(styles.loginButton) + '\' onclick=\'window.HarbourSDK.player.onLoginButtonPress()\'>\n  <svg xmlns=\'http://www.w3.org/2000/svg\' style=\'' + resolveStyles(styles.loginIcon) + '\' viewBox=\'0 0 216 216\' color=\'#FFFFFF\'>\n    <path fill=\'#FFFFFF\' d=\'\n M204.1 0H11.9C5.3 0 0 5.3 0 11.9v192.2c0 6.6 5.3 11.9 11.9\n 11.9h103.5v-83.6H87.2V99.8h28.1v-24c0-27.9 17-43.1 41.9-43.1\n 11.9 0 22.2.9 25.2 1.3v29.2h-17.3c-13.5 0-16.2 6.4-16.2\n 15.9v20.8h32.3l-4.2 32.6h-28V216h55c6.6 0 11.9-5.3\n 11.9-11.9V11.9C216 5.3 210.7 0 204.1 0z\'>\n    </path>\n  </svg>\n  <div style=\'' + resolveStyles(styles.buttonText) + '\'>Continue With Facebook</div>\n</div>';

    _appendHtmlToLoader(html);
  }
  function removeLoginButton() {
    var login = document.getElementById('harbour-loader-login-button');
    var loader = document.getElementById('harbour-loader');

    login && loader && loader.removeChild(login);
  }

  function addBlockError() {
    var html = '<div style=\'' + resolveStyles(styles.errorText) + '\'>\n  Error communicating with Facebook.<br/>\n  This site requires Facebook login.<br/>\n  Please check your adblocker or reload the page.\n</div>';

    _appendHtmlToLoader(html);
  }

  function _appendHtmlToLoader(html) {
    var loader = document.getElementById('harbour-loader');
    var temp = document.createElement('div');
    temp.innerHTML = html;
    loader.appendChild(temp.firstChild);
  }

  var player = {
    getID: getID,
    getName: getName,
    getPhoto: getPhoto,
    getEmail: getEmail,
    getDataAsync: getDataAsync,
    setDataAsync: setDataAsync,
    getStatsAsync: getStatsAsync,
    setStatsAsync: setStatsAsync,
    incrementStatsAsync: incrementStatsAsync,
    flushDataAsync: flushDataAsync,
    getConnectedPlayersAsync: getConnectedPlayersAsync,
    getSignedPlayerInfoAsync: getSignedPlayerInfoAsync,
    canSubscribeBotAsync: canSubscribeBotAsync,
    subscribeBotAsync: subscribeBotAsync
  };
  var Player = {
    init: init,
    player: player
  };

  var g_uid = 0;
  var g_name = "";
  var g_email = "";
  var g_photoUrl = null;
  var g_signedRequest = "";

  function init(done) {
    onMessage("player", _onPlayer);
    sendHost("player", null, function () {
      done();
    });
  }

  function _onPlayer(player) {
    g_uid = player.uid;
    g_name = player.name;
    g_photoUrl = player.photo_url;
  }

  function getID() {
    return g_uid;
  }
  function getName() {
    return g_name;
  }
  function getPhoto() {
    return g_photoUrl;
  }
  function getEmail() {
    return g_email;
  }
  function getDataAsync() {
    return Promise.reject({ code: "CLIENT_UNSUPPORTED_OPERATION" });
  }
  function setDataAsync() {
    return Promise.reject({ code: "CLIENT_UNSUPPORTED_OPERATION" });
  }
  function getStatsAsync() {
    return Promise.reject({ code: "CLIENT_UNSUPPORTED_OPERATION" });
  }
  function setStatsAsync() {
    return Promise.reject({ code: "CLIENT_UNSUPPORTED_OPERATION" });
  }
  function incrementStatsAsync() {
    return Promise.reject({ code: "CLIENT_UNSUPPORTED_OPERATION" });
  }
  function flushDataAsync() {
    return Promise.reject({ code: "CLIENT_UNSUPPORTED_OPERATION" });
  }
  function getConnectedPlayersAsync() {
    return Promise.reject({ code: "CLIENT_UNSUPPORTED_OPERATION" });
  }
  function getSignedPlayerInfoAsync() {
    return Promise.resolve({
      getSignature: function getSignature() {
        return g_signedRequest;
      },
      getPlayerID: getID
    });
  }
  function canSubscribeBotAsync() {
    return Promise.reject({ code: "CLIENT_UNSUPPORTED_OPERATION" });
  }
  function subscribeBotAsync() {
    return Promise.reject({ code: "CLIENT_UNSUPPORTED_OPERATION" });
  }

  var classCallCheck = function (instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  };

  var createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  var Leaderboard = {
    init: init$1,
    getLeaderboardAsync: getLeaderboardAsync
  };

  var g_leaderboardMap = {};

  function init$1(done) {
    onMessage("leaderboard_list", _onList);

    sendHost("leaderboard_list", null, function () {
      done();
    });
  }
  function getLeaderboardAsync(name) {
    var leaderboard = g_leaderboardMap[name];
    if (leaderboard) {
      return Promise.resolve(leaderboard);
    } else {
      return Promise.reject({ code: "LEADERBOARD_NOT_FOUND" });
    }
  }

  function _onList(list) {
    list.forEach(function (name) {
      g_leaderboardMap[name] = new Leaderboard$1(name);
    });
  }

  var Leaderboard$1 = function () {
    function Leaderboard(name) {
      classCallCheck(this, Leaderboard);

      this.name = name;
    }

    createClass(Leaderboard, [{
      key: 'getName',
      value: function getName() {
        return this.name;
      }
    }, {
      key: 'getContextID',
      value: function getContextID() {
        return null;
      }
    }, {
      key: 'getEntryCountAsync',
      value: function getEntryCountAsync() {
        var _this = this;

        return new Promise(function (resolve, reject) {
          var extra = { name: _this.name };
          sendHost("leaderboard_entry_count", extra, function (err, result) {
            if (err) {
              reject({ code: err });
            } else {
              resolve(result.count);
            }
          });
        });
      }
    }, {
      key: 'setScoreAsync',
      value: function setScoreAsync(score, extraData) {
        var _this2 = this;

        return new Promise(function (resolve, reject) {
          var extra = { name: _this2.name, score: score, extraData: extraData };
          sendHost("leaderboard_set_score", extra, function (err, result) {
            if (err) {
              reject({ code: err });
            } else {
              var timestamp = result.timestamp,
                  rank = result.rank;

              var player$$1 = Player.player;
              var entry = new LeaderboardEntry(score, timestamp, rank, extraData, player$$1);
              resolve(entry);
            }
          });
        });
      }
    }, {
      key: 'getPlayerEntryAsync',
      value: function getPlayerEntryAsync() {
        var _this3 = this;

        return new Promise(function (resolve, reject) {
          var extra = { name: _this3.name };
          sendHost("leaderboard_player_entry", extra, function (err, result) {
            if (err) {
              reject({ code: err });
            } else {
              var timestamp = result.timestamp,
                  rank = result.rank,
                  extraData = result.extraData;

              var player$$1 = Player.player;
              var entry = new LeaderboardEntry(score, timestamp, rank, extraData, player$$1);
              resolve(entry);
            }
          });
        });
      }
    }, {
      key: 'getEntriesAsync',
      value: function getEntriesAsync(count, offset) {
        var _this4 = this;

        return new Promise(function (resolve, reject) {
          var extra = { name: _this4.name, count: count, offset: offset };
          sendHost("leaderboard_entries", extra, function (err, results) {
            if (err) {
              reject({ code: err });
            } else {
              entry_list = results.map(function (result) {
                var score = result.score,
                    timestamp = result.timestamp,
                    rank = result.rank,
                    extraData = result.extraData,
                    id = result.id,
                    name = result.name,
                    photo = result.photo;

                var player$$1 = new LeaderboardPlayer(id, name, photo);
                var entry = new LeaderboardEntry(score, timestamp, rank, extraData, player$$1);
              });
              resolve(entry_list);
            }
          });
        });
      }
    }, {
      key: 'getConnectedPlayerEntriesAsync',
      value: function getConnectedPlayerEntriesAsync(count, offset) {
        return Promise.resolve([]);
      }
    }]);
    return Leaderboard;
  }();

  var LeaderboardEntry = function () {
    function LeaderboardEntry(score, timestamp, rank, extra_data, player$$1) {
      classCallCheck(this, LeaderboardEntry);

      this.score = score;
      this.timestamp = timestamp;
      this.rank = rank;
      this.extra_data = extra_data;
      this.player = player$$1;
    }

    createClass(LeaderboardEntry, [{
      key: 'getScore',
      value: function getScore() {
        return this.score;
      }
    }, {
      key: 'getFormattedScore',
      value: function getFormattedScore() {
        return this.score;
      }
    }, {
      key: 'getTimestamp',
      value: function getTimestamp() {
        return this.timestamp;
      }
    }, {
      key: 'getRank',
      value: function getRank() {
        return this.rank;
      }
    }, {
      key: 'getExtraData',
      value: function getExtraData() {
        return this.extra_data;
      }
    }, {
      key: 'getPlayer',
      value: function getPlayer() {
        return this.player;
      }
    }]);
    return LeaderboardEntry;
  }();

  var LeaderboardPlayer = function () {
    function LeaderboardPlayer(id, name, photo) {
      classCallCheck(this, LeaderboardPlayer);

      this.id = id;
      this.name = name;
      this.photo = photo;
    }

    createClass(LeaderboardPlayer, [{
      key: 'getID',
      value: function getID() {
        return this.id;
      }
    }, {
      key: 'getName',
      value: function getName() {
        return this.name;
      }
    }, {
      key: 'getPhoto',
      value: function getPhoto() {
        return this.photo;
      }
    }]);
    return LeaderboardPlayer;
  }();

  var Payments = {
    init: init$2
  };

  var payments = {
    setConfig: setConfig,
    onReady: onReady,
    getCatalogAsync: getCatalogAsync,
    purchaseAsync: purchaseAsync,
    getPurchasesAsync: getPurchasesAsync,
    consumePurchaseAsync: consumePurchaseAsync
  };

  function init$2(done) {
    done && done();
  }

  function setConfig(params) {}

  function onReady(callback) {
    callback && callback();
  }

  function getCatalogAsync() {
    return Promise.resolve([]);
  }

  function purchaseAsync(params) {
    var productID = params.productID,
        description = params.description,
        amountUsd = params.amountUsd;


    return new Promise(function (resolve, reject) {
      reject({ code: 'UNSUPPORTED_OPERATION' });
    });
  }

  function getPurchasesAsync() {
    return Promise.resolve([]);
  }
  function consumePurchaseAsync() {
    return Promise.resolve();
  }

  function initializeAsync(params) {
    return new Promise(function (resolve) {
      UI.addLoader(params);

      asyncSeries([Player.init, Leaderboard.init, Payments.init], function (err) {
        resolve();
      });
    });
  }
  function setLoadingProgress(progress) {
    return new Promise(function (resolve) {
      UI.setLoaderText(progress.toFixed() + '% Loaded');
      resolve();
    });
  }
  function startGameAsync() {
    return new Promise(function (resolve) {
      UI.removeLoader();
      resolve();
    });
  }

  var context = {
    getID: getID$1,
    chooseAsync: chooseAsync,
    switchAsync: switchAsync,
    createAsync: createAsync,
    getType: getType,
    isSizeBetween: isSizeBetween,
    getPlayersAsync: getPlayersAsync
  };

  function getID$1() {
    return null;
  }
  function getType() {
    return "SOLO";
  }
  function chooseAsync() {
    return Promise.reject({ code: "USER_CANCEL" });
  }
  function createAsync() {
    return Promise.reject({ code: "USER_CANCEL" });
  }
  function switchAsync() {
    return Promise.reject({ code: "USER_CANCEL" });
  }
  function isSizeBetween() {
    return null;
  }
  function getPlayersAsync() {
    return Promise.reject({ code: "CLIENT_UNSUPPORTED_OPERATION" });
  }

  var HarbourSDK = {
    emitMessage: emitMessage,
    player: player,
    context: context,
    payments: payments,
    getLocale: getLocale,
    initializeAsync: initializeAsync,
    setLoadingProgress: setLoadingProgress,
    startGameAsync: startGameAsync,
    quit: quit,
    updateAsync: updateAsync,
    getEntryPointData: getEntryPointData,
    getEntryPointAsync: getEntryPointAsync,
    setSessionData: setSessionData,
    getPlatform: getPlatform,
    getSDKVersion: getSDKVersion,
    getSupportedAPIs: getSupportedAPIs,
    shareAsync: shareAsync,
    switchGameAsync: switchGameAsync,
    logEvent: logEvent,
    onPause: onPause,
    getInterstitialAdAsync: getInterstitialAdAsync,
    getRewardedVideoAsync: getRewardedVideoAsync,
    getLeaderboardAsync: getLeaderboardAsync
  };

  window.HarbourSDK = HarbourSDK;
  window.FBInstant = window.FBInstant || HarbourSDK;

  function getLocale() {
    var locale = "en-US";
    if (window.navigator) {
      if (window.navigator.language) {
        locale = window.navigator.language;
      } else if (window.navigator.languages && window.navigator.languages[0]) {
        locale = window.navigator.languages[0];
      }
    }
    return locale;
  }
  function quit() {
    window.close();
  }
  function updateAsync() {
    return Promise.reject({ code: "CLIENT_UNSUPPORTED_OPERATION" });
  }
  function getEntryPointData() {
    return {};
  }
  function getEntryPointAsync() {
    return Promise.resolve(null);
  }
  function setSessionData() {}
  function getPlatform() {
    return "WEB";
  }
  function getSDKVersion() {
    return "6.2";
  }
  function getSupportedAPIs() {
    var api_list = [];
    for (var prop in HarbourSDK) {
      api_list.push(prop);
    }
    for (var _prop in HarbourSDK.player) {
      api_list.push("player." + _prop);
    }
    for (var _prop2 in HarbourSDK.context) {
      api_list.push("context." + _prop2);
    }
    for (var _prop3 in HarbourSDK.payment) {
      api_list.push("payment." + _prop3);
    }
    return api_list;
  }
  function shareAsync() {
    return Promise.reject({ code: "USER_CANCEL" });
  }
  function switchGameAsync() {
    return Promise.reject({ code: "CLIENT_UNSUPPORTED_OPERATION" });
  }
  function logEvent(eventName, valueToSum, parameters) {
    return log(eventName, { valueToSum: valueToSum, parameters: parameters });
  }
  function onPause(callback) {
    window.onblur = callback;
  }
  function getInterstitialAdAsync() {
    return Promise.reject({ code: "CLIENT_UNSUPPORTED_OPERATION" });
  }
  function getRewardedVideoAsync() {
    return Promise.reject({ code: "CLIENT_UNSUPPORTED_OPERATION" });
  }

}());
//# sourceMappingURL=harbour-react-native-runner.min.js.map
